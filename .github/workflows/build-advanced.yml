name: Build Executables (Advanced)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.1.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install --upgrade setuptools wheel
    
    - name: Create spec file
      run: |
        echo "# -*- mode: python ; coding: utf-8 -*-" > file_organizer.spec
        echo "" >> file_organizer.spec
        echo "block_cipher = None" >> file_organizer.spec
        echo "" >> file_organizer.spec
        echo "a = Analysis(" >> file_organizer.spec
        echo "    ['file_organizer.py']," >> file_organizer.spec
        echo "    pathex=[]," >> file_organizer.spec
        echo "    binaries=[]," >> file_organizer.spec
        echo "    datas=[]," >> file_organizer.spec
        echo "    hiddenimports=[]," >> file_organizer.spec
        echo "    hookspath=[]," >> file_organizer.spec
        echo "    hooksconfig={}," >> file_organizer.spec
        echo "    runtime_hooks=[]," >> file_organizer.spec
        echo "    excludes=[]," >> file_organizer.spec
        echo "    win_no_prefer_redirects=False," >> file_organizer.spec
        echo "    win_private_assemblies=False," >> file_organizer.spec
        echo "    cipher=block_cipher," >> file_organizer.spec
        echo "    noarchive=False," >> file_organizer.spec
        echo ")" >> file_organizer.spec
        echo "" >> file_organizer.spec
        echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> file_organizer.spec
        echo "" >> file_organizer.spec
        echo "exe = EXE(" >> file_organizer.spec
        echo "    pyz," >> file_organizer.spec
        echo "    a.scripts," >> file_organizer.spec
        echo "    a.binaries," >> file_organizer.spec
        echo "    a.zipfiles," >> file_organizer.spec
        echo "    a.datas," >> file_organizer.spec
        echo "    []," >> file_organizer.spec
        echo "    name='File Organizer'," >> file_organizer.spec
        echo "    debug=False," >> file_organizer.spec
        echo "    bootloader_ignore_signals=False," >> file_organizer.spec
        echo "    strip=False," >> file_organizer.spec
        echo "    upx=True," >> file_organizer.spec
        echo "    upx_exclude=[]," >> file_organizer.spec
        echo "    runtime_tmpdir=None," >> file_organizer.spec
        echo "    console=False," >> file_organizer.spec
        echo "    disable_windowed_traceback=False," >> file_organizer.spec
        echo "    argv_emulation=False," >> file_organizer.spec
        echo "    target_arch=None," >> file_organizer.spec
        echo "    codesign_identity=None," >> file_organizer.spec
        echo "    entitlements_file=None," >> file_organizer.spec
        echo "    icon='icon.ico'," >> file_organizer.spec
        echo ")" >> file_organizer.spec
    
    - name: Build Windows executable
      run: |
        pyinstaller file_organizer.spec
    
    - name: Check file size
      run: |
        $size = (Get-Item "dist/File Organizer.exe").Length
        $sizeMB = [math]::Round($size / 1MB, 2)
        echo "Executable size: $sizeMB MB"
        if ($size -gt 200MB) {
          echo "Warning: Executable is larger than 200MB"
        }
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: File-Organizer-Windows-v${{ github.event.inputs.version || github.ref_name }}
        path: dist/File Organizer.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install --upgrade setuptools wheel
    
    - name: Build Linux executable
      run: |
        pyinstaller --onefile --windowed --icon=icon.ico --name="File Organizer" file_organizer.py
    
    - name: Make executable
      run: |
        chmod +x dist/File\ Organizer
    
    - name: Check file size
      run: |
        size=$(stat -c%s "dist/File Organizer")
        size_mb=$(echo "scale=2; $size/1024/1024" | bc)
        echo "Executable size: ${size_mb} MB"
        if [ $size -gt 209715200 ]; then
          echo "Warning: Executable is larger than 200MB"
        fi
    
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: File-Organizer-Linux-v${{ github.event.inputs.version || github.ref_name }}
        path: dist/File Organizer
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install --upgrade setuptools wheel
    
    - name: Build macOS executable
      run: |
        pyinstaller --onefile --windowed --icon=icon.ico --name="File Organizer" file_organizer.py
    
    - name: Make executable
      run: |
        chmod +x dist/File\ Organizer
    
    - name: Check file size
      run: |
        size=$(stat -f%z "dist/File Organizer")
        size_mb=$(echo "scale=2; $size/1024/1024" | bc)
        echo "Executable size: ${size_mb} MB"
        if [ $size -gt 209715200 ]; then
          echo "Warning: Executable is larger than 200MB"
        fi
    
    - name: Upload macOS executable
      uses: actions/upload-artifact@v4
      with:
        name: File-Organizer-macOS-v${{ github.event.inputs.version || github.ref_name }}
        path: dist/File Organizer
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          File-Organizer-Windows-v*/File Organizer.exe
          File-Organizer-Linux-v*/File Organizer
          File-Organizer-macOS-v*/File Organizer
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
